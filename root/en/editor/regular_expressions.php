{"title":"What are regular expressions","description":"Regular expressions are special templates used to find the necessary substrings in a string. The template uses metacharacters, flags, sets of symbols and links.","content":"## Definition\r\n**Regular expressions** are special templates used to find the necessary substrings in a string. The template itself is a string consisting of special characters, each of which has a specific meaning. Such symbols are called **metacharacters**. \r\n\r\nThis article discusses metacharacters, flags, and sets of symbols used in regular expressions that can be useful for creating regular expressions.\r\n\r\n### Special characters\r\nA regular expression template is constructed from any characters, some of which have a specific purpose. All numbers and symbols of the alphabet that special characters work with are written as is. In order to write a metacharacter as it is, it must be **escaped** with a backslash (backslash).\r\n\r\n**Quantifier** is a metacharacter that allows you to limit the number of repetitions of the preceding character or group of characters. There are the following quantifiers: ? + * {n}.\r\n\r\n| Symbol | Template example | Description |\r\n| - | - | - |\r\n| `/` | `/.*/` | Creating a regular expression. The symbol must be at the beginning and at the end of the template.  |\r\n| `.` | `/.*/` | Represents any character in a string. |\r\n| `*` | `/.*/` | Quantifier. Finds a string consisting of the previous character (in this case, any character) that is repeated 0 or more times. In the current example, it is equivalent to the entire string that is being searched |\r\n| `{ }` | `/a{2}/` | Quantifier. Finds a string consisting of the previous character, which is repeated the number of times specified in curly brackets. You can specify a range. So the range `{2, 5}` will find strings from 2 to 5 characters long, and `{2, }` will find a string whose length is greater than or equal to 2. |\r\n| `+` | `/.+/` | Quantifier. Finds a string consisting of the previous character that is repeated 1 or more times. |\r\n| `?` | `/.?/` | Quantifier. Finds a string consisting of the previous character, which is repeated 0 or 1 times. |\r\n| `?` | `/.*?/` | Initially quantifiers . and + are greedy, that is, they try to capture as many characters as possible in the resulting string. In this case, a quantifier followed by a metacharacter ? it becomes non-greedy and will search for the shortest strings matching the pattern, for example, in the string \"abcde\" it will find only a |\r\n| `^` | `/^a+/` | Indicates that the subsequent part of the template should match the beginning of the string. In this template, when matching with the string \"aabc\", it will find aa, in the string \"ddaaa\" it will not find anything. |\r\n| `$` | `/a+$/` | Specifies that the preceding part of the template should be matched only at the end of the line. Here in the line \"cba\" will find a |\r\n| `[ ]` | `/[abc]*/` | The set of characters specified in square brackets. You can specify a range separated by dashes, for example `/[a-z]*/`, which is equal to any word consisting of letters of the Latin alphabet. It is also possible to insert character classes: `/[\\d.]*/` which corresponds to any number in the string. To add a dash character to a set, place it at the end of the set `/[a-z-]*/`. |\r\n| `[^ ]` | `/[ abc]*/` | Characters that are not included in this character set. The ^ character is added to the group only if it is not at the beginning of the set. |\r\n| `()` | `/(abc)+/` | Bracket group. Groups the contents and allows you to apply quantifiers to them. The contents of the brackets can be obtained as a result of applying a template. |\r\n| `(?:)` | `/(?: abc)+/` | Exclusive bracket group. The contents of the brackets are excluded from the result. |\r\n| `x(?=y)` | `/a(?=b)/` | Is mapped to x only if x is followed by y |\r\n| `x(?!y)` | `/a(?!b)/` | Is mapped to x only if x is not followed by y |\r\n| `x(?<=y)` | `/a(?<=b)/` | Is mapped to x only if y is followed by x |\r\n| `x(?<!y)` |`/a(?<!b)/` | Is mapped to x only if y is not followed by x |\r\n| `a\\|b` | `/a(a\\|b\\|c)a/` | Alternation. Allows you to match either a or b. In this example, it will find aaa and aba in the string baaabac. |\r\n| `(?<key>)` | `/(?<link>[a-zA-Z]{2})(\\k<link>*)/` | Creates a reference to a bracket group, allowing you to get its value as a result by keyword.  |\r\n| `\\` | `/\\\\.+/` | Escape symbol - allows you to use special characters in templates. When applied to the letters of the Latin alphabet, it represents character classes (more on this below). In this example, it finds a string whose beginning is equal to a point. |\r\n\r\n### Flags\r\nThe flags indicate the pattern matching rules and are specified after the regular expression: `/abc/i'. You can also set multiple flags, no matter what sequence.\r\n\r\n| Flag | Decryption | Value |\r\n| - | - |  - | \r\n| `u` | Unicode | Process a string using Unicode encoding |\r\n| `g` | Global | Search for all matches. In the absence of a flag, it finds only the first match that comes across |\r\n| `i` | Ignore | Ignore case when matching |\r\n| `m` | Multiline | Performs a search on several lines. The template in which $ and ^ are used is also applied for each line |\r\n\r\n### Symbolic classes and links\r\nTo specify a group of characters, there are special characters `[]`, however, for some groups, character classes are initially predefined that speed up the creation of templates. \r\n\r\nTo insert a character class, the backslash character `\\` is used.\r\n\r\nExample: `/\\d/` - find all integers.\r\n\r\n| Symbol | Decryption | Value |\r\n| - | - | - |\r\n| `\\d` | Digit | Digits from 0 to 9. |\r\n| `\\s` | Space | Any whitespace characters, including the space character, tab, line feed. |\r\n| `\\w` | Word | Any letter of the Latin alphabet, as well as numbers from 0 to 9 and an underscore. |\r\n| `\\t` | Tabulation | Tab character. | \r\n| `\\r` | Carriage return | Carriage return is a symbol that controls the return of the current position to the beginning of the current line.|\r\n| `\\n` | New line | Line break symbol. |\r\n| `\\r` | Form feed | Page separator. |\r\n| `\\v` | Vertical tabulation | Vertical tab character. |\r\n| `\\b` | Border | The border of the word. |\r\n| `[\\b]` | Backspace | The Backspace symbol. It is set only in a character set. |\r\n| `\\xCC` | | is a character with the CC code. |\r\n| `\\uCCCC` | Unicode | It is a Unicode character with the CCCC code. |\r\n| `\\p{prop}` | Unicode | It is a symbol whose prop property corresponds to a certain group of Unicode characters. |\r\n| `\\k<>` | Keyword | Backlink by anchor name. Example: `/(?<word>[a-zA-Z]{2})(\\k<word>*)/` - creates a reference to the bracket group, the value of which is re-applied later. |\r\n| `\\n` | | Back reference to the bracket group, where n is a number from 1 representing the number of the bracket group in the sequence.  |\r\n| `\\0` | Null | Corresponds to the Null character |\r\n\r\nYou can also find characters that are not in this character class. To do this, the character is written in uppercase. \r\n\r\nFor example: `/\\D/` - find all characters that are not in class d, that is, not numbers.\r\n\r\n### Character Properties\r\nNot many people know, but each Unicode character has some properties, which allows it to be attributed to a certain group of characters: numbers, numbers, alphabet, emoji, the presence of an ASCII character, and so on.\r\n\r\nTo search by property, the following syntax is used: `/\\p{prop=value}/`, where prop is a property and value is its value, for example: `{sc=Cyrillic}`, `{Emoji=yes}` or simply `{Emoji}`. If the value of the property is Boolean, then it is enough to specify only the property, for example: `{Alpha}`.\r\n\r\nIn order to apply this functionality, it is necessary to add the **u** flag to the regular expression.\r\n\r\nThe following table shows the properties with a Boolean value\r\n\r\n| Property | Alias | Description |\r\n| - | - | - |\r\n| Alphabetic | Alpha | Is a letter of any alphabet |\r\n| Uppercase | Upper | Capital letter |\r\n| Lowercase | Lower | Lowercase letter |\r\n| Emoji | Emoji | Emojis | \r\n| ASCII | ASCII | The presence of a character in ASCII encoding |\r\n| Hex_Digit | AHex | The symbol is used in hexadecimal notation |\r\n| Math | Math | Mathematical symbols |\r\n| White_Space | Pat_WS | Separating characters: newline, new page... |\r\n\r\nYou can also determine which alphabet the symbol is taken from. To do this, use the Script property or its alias sc\r\n\r\n Value | Abbreviation | Description\r\n| - | - |  - | \r\n| Cyrillic | Cyrl |  | \r\n| Arabic | Arab |  | \r\n| Armenian | Armn |  | \r\n| Latin | Latn |  | \r\n| Common | Zyyy | Common characters that are not letters of the alphabet | \r\n\r\nAnd many others...\r\n\r\nOur article shows only a small part of all possible properties. You can enjoy the full list on [Unicode website](https://www.unicode.org/Public/UCD/latest/ucd/PropertyValueAliases.txt ).\r\n\r\nIn addition, on the Unicode website there is an opportunity to read [all properties of the unicode character](https://util.unicode.org/UnicodeJsps/character.jsp )\n\n You can also familiarize yourself with other functionality of this online [text editor](/en/editor)."}